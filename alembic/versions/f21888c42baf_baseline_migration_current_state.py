"""baseline_migration_current_state

Revision ID: f21888c42baf
Revises:
Create Date: 2025-09-29 17:38:12.370126

"""
from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = 'f21888c42baf'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_ConversationAnalysis_conversation_id', table_name='ConversationAnalysis')
    op.drop_index('ix_ConversationAnalysis_id', table_name='ConversationAnalysis')
    op.drop_table('ConversationAnalysis')
    op.drop_index('ix_Goals2Card_id', table_name='Goals2Card')
    op.drop_table('Goals2Card')
    op.drop_index('ix_demo_conversation_logs_persona_id', table_name='demo_conversation_logs')
    op.drop_table('demo_conversation_logs')
    op.drop_index('ix_demo_personas_persona_id', table_name='demo_personas')
    op.drop_table('demo_personas')
    op.drop_index('ix_UserGoals_id', table_name='UserGoals')
    op.drop_table('UserGoals')
    op.drop_index('ix_Goal_id', table_name='Goal')
    op.drop_table('Goal')
    op.drop_index('ix_SuggestionResult_id', table_name='SuggestionResult')
    op.drop_table('SuggestionResult')
    op.drop_index('idx_user_personas_user_id', table_name='user_personas')
    op.drop_index('ix_user_personas_id', table_name='user_personas')
    op.drop_table('user_personas')
    op.drop_index('ix_MatrixSelection_id', table_name='MatrixSelection')
    op.drop_table('MatrixSelection')
    op.drop_index('idx_mentor_conversations_last_message_at', table_name='mentor_conversations')
    op.drop_index('idx_mentor_conversations_user_id', table_name='mentor_conversations')
    op.drop_index('ix_mentor_conversations_id', table_name='mentor_conversations')
    op.drop_table('mentor_conversations')
    op.drop_table('voice_matrix_state')
    op.drop_index('ix_ConversationReport_id', table_name='ConversationReport')
    op.drop_table('ConversationReport')
    op.drop_index('ix_daily_wellness_metrics_date', table_name='daily_wellness_metrics')
    op.drop_index('ix_daily_wellness_metrics_id', table_name='daily_wellness_metrics')
    op.drop_index('ix_daily_wellness_metrics_user_date', table_name='daily_wellness_metrics')
    op.drop_index('ix_daily_wellness_metrics_user_id', table_name='daily_wellness_metrics')
    op.drop_table('daily_wellness_metrics')
    op.drop_column('User', 'last_matrix_summary')
    op.alter_column('voice_therapy_sessions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index('ix_voice_therapy_sessions_start_time', table_name='voice_therapy_sessions')
    op.drop_index('ix_voice_therapy_sessions_user_id', table_name='voice_therapy_sessions')
    op.drop_constraint('fk_voice_sessions_usercard', 'voice_therapy_sessions', type_='foreignkey')
    op.create_foreign_key(None, 'voice_therapy_sessions', 'User', ['user_id'], ['user_id'])
    op.create_foreign_key(None, 'voice_therapy_sessions', 'UserCard', ['linked_user_card_id'], ['card_id'])
    op.drop_column('voice_therapy_sessions', 'life_context_updates')
    op.drop_column('voice_therapy_sessions', 'persona_insights')
    op.drop_column('voice_therapy_sessions', 'relationship_mentions')
    op.drop_column('voice_therapy_sessions', 'ag_matrix')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('voice_therapy_sessions', sa.Column('ag_matrix', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('voice_therapy_sessions', sa.Column('relationship_mentions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('voice_therapy_sessions', sa.Column('persona_insights', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('voice_therapy_sessions', sa.Column('life_context_updates', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'voice_therapy_sessions', type_='foreignkey')
    op.drop_constraint(None, 'voice_therapy_sessions', type_='foreignkey')
    op.create_foreign_key('fk_voice_sessions_usercard', 'voice_therapy_sessions', 'UserCard', ['linked_user_card_id'], ['card_id'], ondelete='SET NULL')
    op.create_index('ix_voice_therapy_sessions_user_id', 'voice_therapy_sessions', ['user_id'], unique=False)
    op.create_index('ix_voice_therapy_sessions_start_time', 'voice_therapy_sessions', ['start_time'], unique=False)
    op.alter_column('voice_therapy_sessions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.add_column('User', sa.Column('last_matrix_summary', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.create_table('daily_wellness_metrics',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('energy_level', sa.REAL(), autoincrement=False, nullable=False),
    sa.Column('stress_level', sa.REAL(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=False),
    sa.CheckConstraint('energy_level >= 0.0::double precision AND energy_level <= 10.0::double precision', name='check_energy_level_range'),
    sa.CheckConstraint('stress_level >= 0.0::double precision AND stress_level <= 10.0::double precision', name='check_stress_level_range'),
    sa.ForeignKeyConstraint(['user_id'], ['User.user_id'], name='daily_wellness_metrics_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='daily_wellness_metrics_pkey'),
    sa.UniqueConstraint('user_id', 'date', name='daily_wellness_metrics_user_id_date_key')
    )
    op.create_index('ix_daily_wellness_metrics_user_id', 'daily_wellness_metrics', ['user_id'], unique=False)
    op.create_index('ix_daily_wellness_metrics_user_date', 'daily_wellness_metrics', ['user_id', 'date'], unique=True)
    op.create_index('ix_daily_wellness_metrics_id', 'daily_wellness_metrics', ['id'], unique=False)
    op.create_index('ix_daily_wellness_metrics_date', 'daily_wellness_metrics', ['date'], unique=False)
    op.create_table('ConversationReport',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('conversation_analysis_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('report_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('report_content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('download_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['conversation_analysis_id'], ['ConversationAnalysis.id'], name='ConversationReport_conversation_analysis_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='ConversationReport_pkey')
    )
    op.create_index('ix_ConversationReport_id', 'ConversationReport', ['id'], unique=False)
    op.create_table('voice_matrix_state',
    sa.Column('session_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('state', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('report_path', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['voice_therapy_sessions.session_id'], name='voice_matrix_state_session_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['User.user_id'], name='voice_matrix_state_user_id_fkey'),
    sa.PrimaryKeyConstraint('session_id', name='voice_matrix_state_pkey')
    )
    op.create_table('mentor_conversations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('conversation_type', sa.VARCHAR(length=50), server_default=sa.text("'general'::character varying"), autoincrement=False, nullable=False),
    sa.Column('messages', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('persona_updates', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('last_message_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['User.user_id'], name='mentor_conversations_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='mentor_conversations_pkey')
    )
    op.create_index('ix_mentor_conversations_id', 'mentor_conversations', ['id'], unique=False)
    op.create_index('idx_mentor_conversations_user_id', 'mentor_conversations', ['user_id'], unique=False)
    op.create_index('idx_mentor_conversations_last_message_at', 'mentor_conversations', ['last_message_at'], unique=False)
    op.create_table('MatrixSelection',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('conversation_analysis_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('matrix_column', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('selected_value', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('confidence_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('justification', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('extracted_keywords', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['conversation_analysis_id'], ['ConversationAnalysis.id'], name='MatrixSelection_conversation_analysis_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='MatrixSelection_pkey')
    )
    op.create_index('ix_MatrixSelection_id', 'MatrixSelection', ['id'], unique=False)
    op.create_table('user_personas',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('persona_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('relationship_map', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('life_context', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('growth_areas', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('conversation_insights', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('last_updated', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['User.user_id'], name='user_personas_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='user_personas_pkey'),
    sa.UniqueConstraint('user_id', name='user_personas_user_id_key')
    )
    op.create_index('ix_user_personas_id', 'user_personas', ['id'], unique=False)
    op.create_index('idx_user_personas_user_id', 'user_personas', ['user_id'], unique=False)
    op.create_table('SuggestionResult',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('conversation_analysis_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('suggestion_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('suggestion_category', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('suggestion_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('relevance_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('triggered_by_numbers', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('recommendation_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['conversation_analysis_id'], ['ConversationAnalysis.id'], name='SuggestionResult_conversation_analysis_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='SuggestionResult_pkey')
    )
    op.create_index('ix_SuggestionResult_id', 'SuggestionResult', ['id'], unique=False)
    op.create_table('Goal',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Goal_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='Goal_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_Goal_id', 'Goal', ['id'], unique=False)
    op.create_table('UserGoals',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('goal_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('target', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('completed', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['goal_id'], ['Goal.id'], name='UserGoals_goal_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['User.user_id'], name='UserGoals_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='UserGoals_pkey')
    )
    op.create_index('ix_UserGoals_id', 'UserGoals', ['id'], unique=False)
    op.create_table('demo_personas',
    sa.Column('persona_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('age', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('occupation', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('relationship_status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('living_situation', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('relationships', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('work_anxiety', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.0'), autoincrement=False, nullable=False),
    sa.Column('social_anxiety', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.0'), autoincrement=False, nullable=False),
    sa.Column('family_anxiety', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.0'), autoincrement=False, nullable=False),
    sa.Column('relationship_anxiety', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.0'), autoincrement=False, nullable=False),
    sa.Column('sleep_quality', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('5.0'), autoincrement=False, nullable=False),
    sa.Column('daily_patterns', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('weekly_patterns', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('crisis_escalation_levels', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('current_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('current_location', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('current_emotional_state', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('demo_started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('persona_id', name='demo_personas_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_demo_personas_persona_id', 'demo_personas', ['persona_id'], unique=False)
    op.create_table('demo_conversation_logs',
    sa.Column('log_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('persona_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('partner_context', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('ai_response', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('detected_context', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('conflict_summary', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('emotional_state', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('session_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('session_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('resolution_reached', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('key_insights', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('coping_strategies_used', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('cognitive_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('follow_up_actions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('session_summary', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['persona_id'], ['demo_personas.persona_id'], name='demo_conversation_logs_persona_id_fkey'),
    sa.PrimaryKeyConstraint('log_id', name='demo_conversation_logs_pkey')
    )
    op.create_index('ix_demo_conversation_logs_persona_id', 'demo_conversation_logs', ['persona_id'], unique=False)
    op.create_table('Goals2Card',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('goal_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('card_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['card_id'], ['CardDetail.id'], name='Goals2Card_card_id_fkey'),
    sa.ForeignKeyConstraint(['goal_id'], ['Goal.id'], name='Goals2Card_goal_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='Goals2Card_pkey')
    )
    op.create_index('ix_Goals2Card_id', 'Goals2Card', ['id'], unique=False)
    op.create_table('ConversationAnalysis',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('conversation_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('conversation_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('conversation_context', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('matrix_selections', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('analysis_status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['User.user_id'], name='ConversationAnalysis_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='ConversationAnalysis_pkey')
    )
    op.create_index('ix_ConversationAnalysis_id', 'ConversationAnalysis', ['id'], unique=False)
    op.create_index('ix_ConversationAnalysis_conversation_id', 'ConversationAnalysis', ['conversation_id'], unique=True)
    # ### end Alembic commands ###
